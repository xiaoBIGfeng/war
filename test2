import os
import os.path as osp
import glob
import logging
import numpy as np
import cv2
import torch
import torch.multiprocessing as mp
import torch.distributed as dist

import utils.util as util
import data.util as data_util
import models.modules.sttrans as sttrans


def setup(rank, world_size):
    dist.init_process_group("nccl", rank=rank, world_size=world_size)
    torch.cuda.set_device(rank)


def cleanup():
    dist.destroy_process_group()


def main_worker(rank, world_size, sub_folder_l, model_path, test_dataset_folder, test_dataset_folder_LR, save_folder, logger):
    """Main worker for each process (GPU)."""

    # Set up distributed training
    setup(rank, world_size)

    # Load model and move to the assigned GPU
    scale = 4
    N_ot = 7  # 3
    model = sttrans.STTrans2(scale=4, n_inputs=4, n_outputs=7, nf=64, embed_dim=72, window_size=8)
    model.load_state_dict(torch.load(model_path), strict=True)
    model.eval()
    model = model.to(rank)

    # Split the sub-folder list for this GPU
    sub_folder_l = sub_folder_l[rank::world_size]

    avg_psnr_l, avg_psnr_y_l, avg_ssim_l, avg_ssim_y_l = [], [], [], []
    sub_folder_name_l = []

    for sub_folder in sub_folder_l:
        gt_tested_list = []
        sub_folder_name_fa = sub_folder.split('/')[-2]
        sub_folder_name_so = sub_folder.split('/')[-1]
        sub_folder_name = sub_folder_name_fa + '/' + sub_folder_name_so
        sub_folder_name_l.append(sub_folder_name)
        save_sub_folder = osp.join(save_folder, sub_folder_name)

        img_LR_l = sorted(glob.glob(sub_folder + '/*'))

        imgs = util.read_seq_imgs(sub_folder)
        img_GT_l = []
        sub_folder_GT = osp.join(sub_folder.replace('/sequences_LR/', '/sequences/'))

        for img_GT_path in sorted(glob.glob(osp.join(sub_folder_GT, '*'))):
            img_GT_l.append(util.read_image(img_GT_path))

        avg_psnr_sum, avg_psnr_sum_y = 0, 0
        avg_ssim_sum, avg_ssim_sum_y = 0, 0
        cal_n = 0

        if len(img_LR_l) == len(img_GT_l):
            skip = True
        else:
            skip = False

        select_idx_list = util.test_index_generation(skip, N_ot, len(img_LR_l))
        for select_idxs in select_idx_list:
            select_idx = select_idxs[0]
            gt_idx = select_idxs[1]
            imgs_in = imgs.index_select(0, torch.LongTensor(select_idx)).unsqueeze(0).to(rank)

            with torch.no_grad():
                b, n, c, h, w = imgs_in.size()
                h_n = int(8 * np.ceil(h / 8))
                w_n = int(8 * np.ceil(w / 8))
                imgs_temp = imgs_in.new_zeros(b, n, c, h_n, w_n)
                imgs_temp[:, :, :, 0:h, 0:w] = imgs_in
                output = model(imgs_temp)
                output = output[:, :, :, 0:scale * h, 0:scale * w]
                if isinstance(output, list) or isinstance(output, tuple):
                    outputs = output[0]
                else:
                    outputs = output

            outputs = outputs.data.float().cpu().squeeze(0)

            for idx, name_idx in enumerate(gt_idx):
                if name_idx in gt_tested_list:
                    continue
                gt_tested_list.append(name_idx)
                output_f = outputs[idx, :, :, :].squeeze(0)

                output = util.tensor2img(output_f)

                output = output / 255.
                GT = np.copy(img_GT_l[name_idx])

                cropped_output = output
                cropped_GT = GT

                crt_psnr = util.calculate_psnr(cropped_output * 255, cropped_GT * 255)
                cropped_GT_y = data_util.bgr2ycbcr(cropped_GT, only_y=True)
                cropped_output_y = data_util.bgr2ycbcr(cropped_output, only_y=True)
                crt_psnr_y = util.calculate_psnr(cropped_output_y * 255, cropped_GT_y * 255)

                avg_psnr_sum += crt_psnr
                avg_psnr_sum_y += crt_psnr_y

                crt_ssim = util.calculate_ssim(cropped_output, cropped_GT)
                crt_ssim_y = util.calculate_ssim(cropped_output_y * 255, cropped_GT_y * 255)

                avg_ssim_sum += crt_ssim
                avg_ssim_sum_y += crt_ssim_y

                cal_n += 1

        avg_psnr = avg_psnr_sum / cal_n
        avg_psnr_y = avg_psnr_sum_y / cal_n

        avg_psnr_l.append(avg_psnr)
        avg_psnr_y_l.append(avg_psnr_y)

        avg_ssim = avg_ssim_sum / cal_n
        avg_ssim_y = avg_ssim_sum_y / cal_n

        avg_ssim_l.append(avg_ssim)
        avg_ssim_y_l.append(avg_ssim_y)

    # Collect results from all GPUs
    psnr_tensor = torch.tensor(avg_psnr_l).to(rank)
    psnr_y_tensor = torch.tensor(avg_psnr_y_l).to(rank)
    ssim_tensor = torch.tensor(avg_ssim_l).to(rank)
    ssim_y_tensor = torch.tensor(avg_ssim_y_l).to(rank)

    dist.reduce(psnr_tensor, dst=0)
    dist.reduce(psnr_y_tensor, dst=0)
    dist.reduce(ssim_tensor, dst=0)
    dist.reduce(ssim_y_tensor, dst=0)

    if rank == 0:
        total_avg_psnr = psnr_tensor.mean().item()
        total_avg_psnr_y = psnr_y_tensor.mean().item()
        total_avg_ssim = ssim_tensor.mean().item()
        total_avg_ssim_y = ssim_y_tensor.mean().item()

        logger.info(f'Total Average PSNR: {total_avg_psnr:.6f} dB')
        logger.info(f'Total Average PSNR-Y: {total_avg_psnr_y:.6f} dB')
        logger.info(f'Total Average SSIM: {total_avg_ssim:.6f}')
        logger.info(f'Total Average SSIM-Y: {total_avg_ssim_y:.6f}')

    cleanup()


def main():
    # Set up logging
    save_folder = '../results/Vimeo'
    util.mkdirs(save_folder)
    util.setup_logger('base', save_folder, 'test_reproduce', level=logging.INFO, screen=True, tofile=True)
    logger = logging.getLogger('base')

    test_dataset_folder = '/data/Shenzhen/zzff/STVSR/data/vimeo_septuplet'
    test_dataset_folder_LR = osp.join(test_dataset_folder, 'sequences_LR', 'fast_test')
    with open(test_dataset_folder + '/sep_fast_testlist.txt', 'r') as f:
        sub_folder_l = f.read().splitlines()

    model_path = '/data/Shenzhen/zzff/STVSR/STDAN-main/experiments/speed/models/100000_G.pth'

    world_size = torch.cuda.device_count()
    mp.spawn(main_worker,
             args=(world_size, sub_folder_l, model_path, test_dataset_folder, test_dataset_folder_LR, save_folder, logger),
             nprocs=world_size,
             join=True)


if __name__ == '__main__':
    main()
