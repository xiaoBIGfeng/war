import math
import torch

def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    """
    Fills the input tensor with values drawn from a truncated normal distribution.
    The values are effectively drawn from the normal distribution with the given
    mean and std, then values outside the range [a, b] are redrawn until they fall within the bounds.

    Args:
        tensor (torch.Tensor): The tensor to fill.
        mean (float): The mean of the normal distribution.
        std (float): The standard deviation of the normal distribution.
        a (float): The minimum cutoff value.
        b (float): The maximum cutoff value.
    """
    # Compute the upper and lower bounds in the standard normal space
    def norm_cdf(x):
        # Cumulative distribution function for the standard normal distribution
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    low = norm_cdf((a - mean) / std)
    high = norm_cdf((b - mean) / std)

    # Fill tensor with uniform values for truncation
    tensor.uniform_(2 * low - 1, 2 * high - 1)

    # Use the inverse CDF (probit function) to transform to normal distribution
    tensor.erfinv_()

    # Transform to the desired mean and standard deviation
    tensor.mul_(std * math.sqrt(2.0)).add_(mean)

    # Clamp to the range [a, b]
    tensor.clamp_(min=a, max=b)

    return tensor
