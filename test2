
"""Real-time Spatial Temporal Transformer.
""" 
import numpy as np
import torch
import functools
import torch.nn as nn
import torch.nn.functional as F
import pytorch_lightning as pl
from torchvision.ops import DeformConv2d
from pytorch_lightning import seed_everything
from einops import rearrange
import numbers
# from .layers import (make_layer, ResidualBlock_noBN, EncoderLayer, DecoderLayer, 
#                      InputProj, Downsample, Upsample)
# fzf:
# from layers import make_layer, ResidualBlock_noBN, EncoderLayer, DecoderLayer,InputProj, Downsample, Upsample
from timm.models.layers import trunc_normal_, DropPath

##########################################################################
## Layer Norm

def to_3d(x):
    return rearrange(x, 'b c h w -> b (h w) c')

def to_4d(x,h,w):
    return rearrange(x, 'b (h w) c -> b c h w',h=h,w=w)

class BiasFree_LayerNorm(pl.LightningModule):
    def __init__(self, normalized_shape):
        super(BiasFree_LayerNorm, self).__init__()
        if isinstance(normalized_shape, numbers.Integral):
            normalized_shape = (normalized_shape,)
        normalized_shape = torch.Size(normalized_shape)

        assert len(normalized_shape) == 1

        self.weight = nn.Parameter(torch.ones(normalized_shape))
        self.normalized_shape = normalized_shape

    def forward(self, x):
        sigma = x.var(-1, keepdim=True, unbiased=False)
        return x / torch.sqrt(sigma+1e-5) * self.weight

class WithBias_LayerNorm(pl.LightningModule):
    def __init__(self, normalized_shape):
        super(WithBias_LayerNorm, self).__init__()
        if isinstance(normalized_shape, numbers.Integral):
            normalized_shape = (normalized_shape,)
        normalized_shape = torch.Size(normalized_shape)

        assert len(normalized_shape) == 1

        self.weight = nn.Parameter(torch.ones(normalized_shape))
        self.bias = nn.Parameter(torch.zeros(normalized_shape))
        self.normalized_shape = normalized_shape

    def forward(self, x):
        mu = x.mean(-1, keepdim=True)
        sigma = x.var(-1, keepdim=True, unbiased=False)
        return (x - mu) / torch.sqrt(sigma+1e-5) * self.weight + self.bias


class LayerNorm(pl.LightningModule):
    def __init__(self, dim, LayerNorm_type):
        super(LayerNorm, self).__init__()
        if LayerNorm_type =='BiasFree':
            self.body = BiasFree_LayerNorm(dim)
        else:
            self.body = WithBias_LayerNorm(dim)

    def forward(self, x):
        h, w = x.shape[-2:]
        return to_4d(self.body(to_3d(x)), h, w)
    
##########################################################################
## Multi-DConv Head Transposed Self-Attention (MDTA)
class Attention(pl.LightningModule):
    def __init__(self, dim, num_heads, stride, bias):
        super(Attention, self).__init__()
        self.num_heads = num_heads
        self.temperature = nn.Parameter(torch.ones(num_heads, 1, 1))

        self.stride = stride
        self.qk = nn.Conv2d(dim, dim*2, kernel_size=1, bias=bias)
        self.qk_dwconv = nn.Conv2d(dim*2, dim*2, kernel_size=3, stride=self.stride, padding=1, groups=dim*2, bias=bias)

        self.v = nn.Conv2d(dim, dim, kernel_size=1, bias=bias)
        self.v_dwconv = nn.Conv2d(dim, dim, kernel_size=3, stride=1, padding=1, groups=dim, bias=bias)

        self.project_out = nn.Conv2d(dim, dim, kernel_size=1, bias=bias)
        
    def forward(self, x):
        b,c,h,w = x.shape

        qk = self.qk_dwconv(self.qk(x))
        q,k = qk.chunk(2, dim=1)
        
        v = self.v_dwconv(self.v(x))
        
        b, f, h1, w1 = q.size()

        q = rearrange(q, 'b (head c) h1 w1 -> b head c (h1 w1)', head=self.num_heads)
        k = rearrange(k, 'b (head c) h1 w1 -> b head c (h1 w1)', head=self.num_heads)
        v = rearrange(v, 'b (head c) h w -> b head c (h w)', head=self.num_heads)

        q = torch.nn.functional.normalize(q, dim=-1)
        k = torch.nn.functional.normalize(k, dim=-1)

        attn = (q @ k.transpose(-2, -1)) * self.temperature
        attn = attn.softmax(dim=-1)

        out = (attn @ v)
        
        out = rearrange(out, 'b head c (h w) -> b (head c) h w', head=self.num_heads, h=h, w=w)

        out = self.project_out(out)
        return out

## Gated-Dconv Feed-Forward Network (GDFN)
class FeedForward(pl.LightningModule):
    def __init__(self, dim, ffn_expansion_factor, bias):
        super(FeedForward, self).__init__()

        hidden_features = int(dim*ffn_expansion_factor)

        self.project_in = nn.Conv2d(dim, hidden_features*2, kernel_size=1, bias=bias)

        self.dwconv = nn.Conv2d(hidden_features*2, hidden_features*2, kernel_size=3, stride=1, padding=1, groups=hidden_features*2, bias=bias)

        self.project_out = nn.Conv2d(hidden_features, dim, kernel_size=1, bias=bias)

    def forward(self, x):
        x = self.project_in(x)
        x1, x2 = self.dwconv(x).chunk(2, dim=1)
        x = F.gelu(x1) * x2
        x = self.project_out(x)
        return x

class EDA(pl.LightningModule):
    def __init__(self, in_channels=64):
        super(EDA, self).__init__()
        
        num_blocks = [4,6,6,8] 
        num_refinement_blocks = 4
        heads = [1,2,4,8]
        bias = False
        LayerNorm_type = 'WithBias'

        self.encoder_level1 = nn.Sequential(*[BFA(dim=in_channels, num_heads=heads[0], stride=1, ffn_expansion_factor=2.66, bias=bias, LayerNorm_type=LayerNorm_type) for i in range(2)])
        self.encoder_level2 = nn.Sequential(*[BFA(dim=in_channels, num_heads=heads[1], stride=1, ffn_expansion_factor=2.66, bias=bias, LayerNorm_type=LayerNorm_type) for i in range(2)])
                
        self.down1 = nn.Conv2d(in_channels, in_channels, 3, stride=2, padding=1)        
        self.down2 = nn.Conv2d(in_channels, in_channels, 3, stride=2, padding=1)

        self.alignment0 = alignment(in_channels, memory=True)
        self.alignment1 = alignment(in_channels, memory=True)
        self.alignment2 = alignment(in_channels)
        self.cascade_alignment = alignment(in_channels, memory=True)

        self.offset_up1 = nn.ConvTranspose2d(in_channels, in_channels, 3, stride=2, padding=1, output_padding=1)
        self.offset_up2 = nn.ConvTranspose2d(in_channels, in_channels, 3, stride=2, padding=1, output_padding=1)

        self.up1 = nn.ConvTranspose2d(in_channels, in_channels, 3, stride=2, padding=1, output_padding=1)        
        self.up2 = nn.ConvTranspose2d(in_channels, in_channels, 3, stride=2, padding=1, output_padding=1)
        
    def forward(self, x):
        x = self.encoder_level1(x)
        enc1 = self.down1(x)

        enc1 = self.encoder_level2(enc1)
        enc2 = self.down2(enc1)
        enc2, offset_feat_enc2 = self.alignment2(enc2)
        
        dec1 = self.up2(enc2)
        offset_feat_dec1 = self.offset_up2(offset_feat_enc2) * 2
        enc1, offset_feat_enc1 = self.alignment1(enc1, offset_feat_dec1)
        dec1 = dec1 + enc1

        dec0 = self.up1(dec1)
        offset_feat_dec0 = self.offset_up1(offset_feat_enc1) * 2
        x, offset_feat_x = self.alignment0(x, offset_feat_dec0)
        x = x + dec0

        alinged_feat, offset_feat_x = self.cascade_alignment(x, offset_feat_x)    
        
        return alinged_feat
##########################################################################
class BFA(pl.LightningModule):
    def __init__(self, dim, num_heads, stride, ffn_expansion_factor, bias, LayerNorm_type):
        super(BFA, self).__init__()

        self.norm1 = LayerNorm(dim, LayerNorm_type)
        self.attn = Attention(dim, num_heads, stride, bias)
        self.norm2 = LayerNorm(dim, LayerNorm_type)
        self.ffn = FeedForward(dim, ffn_expansion_factor, bias)

    def forward(self, x):
        x = x + self.attn(self.norm1(x))
        x = x + self.ffn(self.norm2(x))

        return x

class alignment(pl.LightningModule):
    def __init__(self, dim=64, memory=False, stride=1, type='group_conv'):
        
        super(alignment, self).__init__()
        
        act = nn.GELU()
        bias = False

        kernel_size = 3
        padding = kernel_size//2
        deform_groups = 8
        out_channels = deform_groups * 3 * (kernel_size**2)

        self.offset_conv = nn.Conv2d(dim, out_channels, kernel_size, stride=1, padding=padding, bias=bias)
        self.deform = DeformConv2d(dim, dim, kernel_size, padding = 2, groups = deform_groups, dilation=2)            
        self.back_projection = ref_back_projection(dim, stride=1)
        
        self.bottleneck = nn.Sequential(nn.Conv2d(dim*2, dim, kernel_size = 3, padding = 1, bias = bias), act)
        
        if memory==True:
            self.bottleneck_o = nn.Sequential(nn.Conv2d(dim*2, dim, kernel_size = 3, padding = 1, bias = bias), act)
            
    def offset_gen(self, x):
        
        o1, o2, mask = torch.chunk(x, 3, dim=1)
        offset = torch.cat((o1, o2), dim=1)
        mask = torch.sigmoid(mask)
        
        return offset, mask
        
    def forward(self, x, prev_offset_feat=None):

        x = x[0]
        B, f, H, W = x.size()
        ref = x[0].unsqueeze(0)
        ref = torch.repeat_interleave(ref, B, dim=0)

        offset_feat = self.bottleneck(torch.cat([ref, x], dim=1))

        if not prev_offset_feat==None:
            offset_feat = self.bottleneck_o(torch.cat([prev_offset_feat, offset_feat], dim=1))

        offset, mask = self.offset_gen(self.offset_conv(offset_feat)) 

        aligned_feat = self.deform(x, offset, mask)
        aligned_feat[0] = x[0].unsqueeze(0)

        aligned_feat = self.back_projection(aligned_feat)
        aligned_feat = aligned_feat.unsqueeze(0)
        return aligned_feat



class ref_back_projection(pl.LightningModule):
    def __init__(self, in_channels, stride):

        super(ref_back_projection, self).__init__()

        bias = False
        self.feat_fusion = nn.Sequential(nn.Conv2d(in_channels*2, in_channels, 3, stride=1, padding=1), nn.GELU())
        self.encoder1 = nn.Sequential(*[BFA(dim=in_channels*2, num_heads=1, stride=stride, ffn_expansion_factor=2.66, bias=bias, LayerNorm_type='WithBias') for i in range(2)])
        
        self.feat_expand = nn.Sequential(nn.Conv2d(in_channels, in_channels*2, 3, stride=1, padding=1), nn.GELU())
        self.diff_fusion = nn.Sequential(nn.Conv2d(in_channels*2, in_channels, 3, stride=1, padding=1), nn.GELU())
        
    def forward(self, x):
        
        B, f, H, W = x.size()
        #feat = self.encoder1(x)

        ref = x[0].unsqueeze(0)
        ref = torch.repeat_interleave(ref, B, dim=0)
        feat = self.encoder1(torch.cat([ref, x], dim=1))  

        fused_feat = self.feat_fusion(feat)
        exp_feat = self.feat_expand(fused_feat)

        residual = exp_feat - feat
        residual = self.diff_fusion(residual)

        fused_feat = fused_feat + residual

        return fused_feat

def initialize_weights(net_l, scale=1):
    if not isinstance(net_l, list):
        net_l = [net_l]
    for net in net_l:
        for m in net.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, a=0, mode='fan_in')
                m.weight.data *= scale  # for residual block
                if m.bias is not None:
                    m.bias.data.zero_()
            elif isinstance(m, nn.Linear):
                nn.init.kaiming_normal_(m.weight, a=0, mode='fan_in')
                m.weight.data *= scale
                if m.bias is not None:
                    m.bias.data.zero_()
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias.data, 0.0)


def make_layer(block, n_layers):
    layers = []
    for _ in range(n_layers):
        layers.append(block())
    return nn.Sequential(*layers)


class ResidualBlock_noBN(pl.LightningModule):
    '''Residual block w/o BN
    ---Conv-ReLU-Conv-+-
     |________________|
    '''

    def __init__(self, nf=64):
        super(ResidualBlock_noBN, self).__init__()
        self.conv1 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)
        self.conv2 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)

        # initialization
        initialize_weights([self.conv1, self.conv2], 0.1)

    def forward(self, x):
        identity = x
        out = F.relu(self.conv1(x), inplace=True)
        out = self.conv2(out)
        return identity + out

def window_partition(x, window_size):
    """Partition the input video sequences into several windows along spatial 
    dimensions.

    Args:
        x (torch.Tensor): (B, D, H, W, C)
        window_size (tuple[int]): Window size

    Returns: 
        windows: (B*nW, D, Wh, Ww, C)
    """
    B, D, H, W, C = x.shape
    # B, D, num_Hwin, Wh, num_Wwin, Ww, C
    x = x.view(B, D, H // window_size[0], window_size[0], W // window_size[1], window_size[1], C) 
    windows = x.permute(0, 2, 4, 1, 3, 5, 6).contiguous().view(-1, D, window_size[0], window_size[1], C)
    return windows

def window_reverse(windows, window_size, B, D, H, W):
    """Reverse window partition.

    Args:
        windows (torch.Tensor): (B*nW, D, Wh, Ww, C)
        window_size (tuple[int]): Window size
        B (int): Number of batches
        D (int): Number of frames
        H (int): Height of image
        W (int): Width of image

    Returns:
        x: (B, D, H, W, C)
    """
    x = windows.view(B, H // window_size[0], W // window_size[1], D, window_size[0], window_size[1], -1)
    x = x.permute(0, 3, 1, 4, 2, 5, 6).contiguous().view(B, D, H, W, -1)
    return x

def get_window_size(x_size, window_size, shift_size=None):
    """Adjust window size and shift size based on the size of the input.

    Args:
        x_size (tuple[int]): The shape of x.
        window_size (tuple[int]): Window size.
        shift_size (tuple[int], optional): Shift size. Defaults to None.

    Returns:
        use_window_size: Window size for use.
        use_shift_size: Shift size for use.
    """
    use_window_size = list(window_size)
    if shift_size is not None:
        use_shift_size = list(shift_size)
    for i in range(len(x_size)):
        if x_size[i] <= window_size[i]:
            use_window_size[i] = x_size[i]
            if shift_size is not None:
                use_shift_size[i] = 0

    if shift_size is None:
        return tuple(use_window_size)
    else:
        return tuple(use_window_size), tuple(use_shift_size)

class Mlp(pl.LightningModule):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

class WindowAttention3D(pl.LightningModule):
    """Window based multi-head self/cross attention (W-MSA/W-MCA) module with relative 
    position bias. 
    It supports both of shifted and non-shifted window.
    """
    def __init__(self, dim, num_frames_q, num_frames_kv, window_size, num_heads, 
                 qkv_bias=True, qk_scale=None, attn_drop=0., proj_drop=0.):
        """Initialization function.

        Args:
            dim (int): Number of input channels.
            num_frames (int): Number of input frames.
            window_size (tuple[int]): The size of the window.
            num_heads (int): Number of attention heads.
            qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Defaults to True.
            qk_scale (float, optional): Override default qk scale of head_dim ** -0.5 if set. Defaults to None.
            attn_drop (float, optional): Dropout ratio of attention weight. Defaults to 0.0
            proj_drop (float, optional): Dropout ratio of output. Defaults to 0.0
        """
        super().__init__()
        self.dim = dim
        self.num_frames_q = num_frames_q # D1
        self.num_frames_kv = num_frames_kv # D2
        self.window_size = window_size  # Wh, Ww
        self.num_heads = num_heads # nH
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5

        # Define a parameter table of relative position bias
        self.relative_position_bias_table = nn.Parameter(
            torch.zeros((2 * num_frames_kv - 1) * (2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)
        )  # 2*D-1 * 2*Wh-1 * 2*Ww-1, nH

        # 1. 查询和键值的帧索引
        coords_d_q = torch.arange(num_frames_q)  # 查询帧的索引 [0, ..., num_frames_q-1]
        coords_d_kv = torch.arange(num_frames_kv)  # 键值帧的索引 [0, ..., num_frames_kv-1]
        coords_h = torch.arange(window_size[0])  # 高度方向索引 [0, ..., Wh-1]
        coords_w = torch.arange(window_size[1])  # 宽度方向索引 [0, ..., Ww-1]

        # 2. 构建三维网格
        coords_q = torch.stack(torch.meshgrid([coords_d_q, coords_h, coords_w], indexing="ij"))  # 查询帧网格 [3, D1, Wh, Ww]
        coords_kv = torch.stack(torch.meshgrid([coords_d_kv, coords_h, coords_w], indexing="ij"))  # 键值帧网格 [3, D2, Wh, Ww]

        # 3. 展平网格坐标
        coords_q_flatten = torch.flatten(coords_q, 1)  # [3, D1 * Wh * Ww]
        coords_kv_flatten = torch.flatten(coords_kv, 1)  # [3, D2 * Wh * Ww]

        # 4. 计算相对坐标
        relative_coords = coords_q_flatten[:, :, None] - coords_kv_flatten[:, None, :]  # [3, D1 * Wh * Ww, D2 * Wh * Ww]
        relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # [D1 * Wh * Ww, D2 * Wh * Ww, 3]

        # 5. 偏移相对坐标到非负范围
        relative_coords[:, :, 0] += num_frames_kv - 1  # 时间方向偏移
        relative_coords[:, :, 1] += window_size[0] - 1  # 高度方向偏移
        relative_coords[:, :, 2] += window_size[1] - 1  # 宽度方向偏移

        # 6. 线性化相对坐标为索引
        relative_coords[:, :, 0] *= (2 * window_size[0] - 1) * (2 * window_size[1] - 1)
        relative_coords[:, :, 1] *= 2 * window_size[1] - 1
        relative_position_index = relative_coords.sum(-1)  # [D1 * Wh * Ww, D2 * Wh * Ww]

        # 7. 注册相对位置索引
        self.register_buffer("relative_position_index", relative_position_index)

        self.q = nn.Linear(dim, dim, bias=qkv_bias)
        self.kv = nn.Linear(dim, dim * 2, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

        trunc_normal_(self.relative_position_bias_table, std=.02)
        self.softmax = nn.Softmax(dim=-1)

    def forward(self, q, kv=None, mask=None):
        """Forward function.

        Args:
            q (torch.Tensor): (B*nW, D1*Wh*Ww, C)
            kv (torch.Tensor): (B*nW, D2*Wh*Ww, C). Defaults to None.
            mask (torch.Tensor, optional): Mask for shifted window attention (nW, D1*Wh*Ww, D2*Wh*Ww). Defaults to None.

        Returns:
            torch.Tensor: (B*nW, D1*Wh*Ww, C)
        """
        kv = q if kv is None else kv
        B_, N1, C = q.shape # N1 = D1*Wh*Ww, B_ = B*nW
        B_, N2, C = kv.shape # N2 = D2*Wh*Ww, B_ = B*nW

        q = self.q(q).reshape(B_, N1, 1, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        kv = self.kv(kv).reshape(B_, N2, 2, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = q[0], kv[0], kv[1] # B_, nH, N1(2), C
        q = q * self.scale
        attn = (q @ k.transpose(-2, -1)) # B_, nH, N1, N2

        relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view(
            N1, N2, -1)  # D1*Wh*Ww, D2*Wh*Ww, nH
        relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, D1*Wh*Ww, D2*Wh*Ww
        attn = attn + relative_position_bias.unsqueeze(0) # B_, nH, D1*Wh*Ww, D2*Wh*Ww

        if mask is not None:
            nW = mask.shape[0]
            attn = attn.view(B_ // nW, nW, self.num_heads, N1, N2) + mask.unsqueeze(1).unsqueeze(0) # B, nW, nH, D1*Wh*Ww, D2*Wh*Ww
            attn = attn.view(-1, self.num_heads, N1, N2)
            attn = self.softmax(attn)
        else:
            attn = self.softmax(attn)

        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B_, N1, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn

class VSTSREncoderTransformerBlock(pl.LightningModule):
    """Video spatial-temporal super-resolution encoder transformer block.
    """
    def __init__(self, dim, num_heads, num_frames=14, window_size=(8, 8), 
                 shift_size=(0, 0), mlp_ratio=4., qkv_bias=True, qk_scale=None,
                 drop=0., attn_drop=0., drop_path=0., act_layer=nn.GELU, 
                 norm_layer=nn.LayerNorm):
        """Initialization function.

        Args:
            dim (int): Number of input channels. 
            num_heads (int): Number of attention heads.
            num_frames (int): Number of input frames.
            window_size (tuple[int], optional): Window size. Defaults to 8.
            shift_size (tuple[int], optional): Shift size. Defaults to 0.
            mlp_ratio (int, optional): Ratio of mlp hidden dim to embedding dim. Defaults to 4.
            qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Defaults to True.
            qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set. Defaults to None.
            drop (float, optional): Dropout rate. Defaults to 0.
            attn_drop (float, optional): Attention dropout rate. Defaults to 0.
            drop_path (float, optional):  Stochastic depth rate. Defaults to 0.
            act_layer (pl.LightningModule, optional): Activation layer. Defaults to nn.GELU.
            norm_layer (pl.LightningModule, optional): Normalization layer. Defaults to nn.LayerNorm.
        """
        super().__init__()
        self.dim = dim
        self.num_heads = num_heads
        self.num_frames = num_frames
        self.window_size = window_size
        self.shift_size = shift_size
        self.mlp_ratio = mlp_ratio
        assert 0 <= self.shift_size[0] < self.window_size[0], "shift_size must in 0-win_size"
        assert 0 <= self.shift_size[1] < self.window_size[1], "shift_size must in 0-win_size"

        self.norm1 = norm_layer(dim)
        self.attn = WindowAttention3D(
            dim, num_frames_q=self.num_frames, num_frames_kv=self.num_frames,
            window_size=self.window_size, num_heads=num_heads, 
            qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, 
            proj_drop=drop
        )

        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)
       

    def forward(self, x, mask_matrix):
        """Forward function.

        Args:
            x (torch.Tensor): (B, D, H, W, C)
            mask_matrix (torch.Tensor): (nW*B, D*Wh*Ww, D*Wh*Ww)

        Returns:
            torch.Tensor: (B, D, H, W, C)
        """
        B, D, H, W, C = x.shape
        window_size, shift_size = get_window_size((H, W), self.window_size, self.shift_size)

        shortcut = x
        x = self.norm1(x)

        # Padding
        pad_b = (window_size[0] - H % window_size[0]) % window_size[0]
        pad_r = (window_size[1] - W % window_size[1]) % window_size[1]
        x = F.pad(x, (0, 0, 0, pad_r, 0, pad_b, 0, 0))
        _, _, Hp, Wp, _ = x.shape

        # cyclic shift
        if any(i > 0 for i in shift_size):
            shifted_x = torch.roll(x, shifts=(-shift_size[0], -shift_size[1]), dims=(2, 3))
            attn_mask = mask_matrix
        else:
            shifted_x = x
            attn_mask = None

        # partition windows
        x_windows = window_partition(shifted_x, window_size)  # nW*B, D, window_size, window_size, C
        x_windows = x_windows.view(-1, D * window_size[0] * window_size[1], C)  # nW*B, D*window_size*window_size, C

        # W-MSA/SW-MSA
        attn_windows = self.attn(x_windows, mask=attn_mask)[0]  # nW*B, D*window_size*window_size, C

        # merge windows
        attn_windows = attn_windows.view(-1, D, window_size[0], window_size[1], C)
        shifted_x = window_reverse(attn_windows, window_size, B, D, Hp, Wp)  # B, D, H, W, C

        # reverse cyclic shift
        if any(i > 0 for i in shift_size):
            x = torch.roll(shifted_x, shifts=(shift_size[0], shift_size[1]), dims=(2, 3))
        else:
            x = shifted_x

        if pad_r > 0 or pad_b > 0:
            x = x[:, :, :H, :W, :].contiguous()

        # FFN
        x = shortcut + self.drop_path(x)
        x = x + self.drop_path(self.mlp(self.norm2(x)))

        return x

class VSTSRDecoderTransformerBlock(pl.LightningModule):
    """Video spatial-temporal super-resolution decoder transformer block.
    """
    def __init__(self, dim, num_heads, num_frames=4, window_size=(8, 8), 
                 shift_size=(0, 0), mlp_ratio=4., qkv_bias=True, qk_scale=None,
                 drop=0., attn_drop=0., drop_path=0., act_layer=nn.GELU, 
                 norm_layer=nn.LayerNorm):
        """Initialization function.

        Args:
            dim (int): Number of input channels. 
            num_heads (int): Number of attention heads.
            num_frames (int): Number of input frames.
            window_size (tuple[int], optional): Window size. Defaults to 8.
            shift_size (tuple[int], optional): Shift size. Defaults to 0.
            mlp_ratio (int, optional): Ratio of mlp hidden dim to embedding dim. Defaults to 4.
            qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Defaults to True.
            qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set. Defaults to None.
            drop (float, optional): Dropout rate. Defaults to 0.
            attn_drop (float, optional): Attention dropout rate. Defaults to 0.
            drop_path (float, optional):  Stochastic depth rate. Defaults to 0.
            act_layer (pl.LightningModule, optional): Activation layer. Defaults to nn.GELU.
            norm_layer (pl.LightningModule, optional): Normalization layer. Defaults to nn.LayerNorm.
        """
        super().__init__()
        self.dim = dim
        self.num_heads = num_heads
        self.num_frames = num_frames
        self.num_out_frames = 1
        self.window_size = window_size
        self.shift_size = shift_size
        self.mlp_ratio = mlp_ratio
        assert 0 <= self.shift_size[0] < self.window_size[0], "shift_size must in 0-win_size"
        assert 0 <= self.shift_size[1] < self.window_size[1], "shift_size must in 0-win_size"

        self.norm1 = norm_layer(dim)
        self.attn1 = WindowAttention3D(
            dim, num_frames_q=self.num_out_frames, 
            num_frames_kv=self.num_out_frames, window_size=self.window_size, 
            num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, 
            attn_drop=attn_drop, proj_drop=drop
        )
        self.attn2 = WindowAttention3D(
            dim, num_frames_q=self.num_out_frames, 
            num_frames_kv=self.num_frames, window_size=self.window_size, 
            num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, 
            attn_drop=attn_drop, proj_drop=drop
        )

        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        self.norm3 = norm_layer(dim)
        self.norm_kv = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)
       

    def forward(self, x, attn_kv, mask_matrix_q, mask_matrix_qkv):
        """Forward function.

        Args:
            x (torch.Tensor): (B, D1, H, W, C)
            attn_kv (torch.Tensor): (B, D2, H, W, C)
            mask_matrix_q (torch.Tensor): (nW*B, D1*Wh*Ww, D1*Wh*Ww)
            mask_matrix_qkv (torch.Tensor): (nW*B, D1*Wh*Ww, D2*Wh*Ww)

        Returns:
            torch.Tensor: (B, D1, H, W, C)
        """
        B, D1, H, W, C = x.shape
        B, D2, H, W, C = attn_kv.shape
        window_size, shift_size = get_window_size((H, W), self.window_size, self.shift_size)

        shortcut = x
        x = self.norm1(x)

        # Padding
        pad_b = (window_size[0] - H % window_size[0]) % window_size[0]
        pad_r = (window_size[1] - W % window_size[1]) % window_size[1]
        x = F.pad(x, (0, 0, 0, pad_r, 0, pad_b, 0, 0))
        _, _, Hp, Wp, _ = x.shape

        # cyclic shift
        if any(i > 0 for i in shift_size):
            shifted_x = torch.roll(x, shifts=(-shift_size[0], -shift_size[1]), dims=(2, 3))
            attn_mask_q = mask_matrix_q
            attn_mask_qkv = mask_matrix_qkv
        else:
            shifted_x = x
            attn_mask_q = None
            attn_mask_qkv = None

        # partition windows
        x_windows = window_partition(shifted_x, window_size)  # nW*B, D1, window_size, window_size, C
        x_windows = x_windows.view(-1, D1 * window_size[0] * window_size[1], C)  # nW*B, D1*window_size*window_size, C

        # W-MSA/SW-MSA for query
        attn_windows = self.attn1(x_windows, mask=attn_mask_q)[0] # nW*B, D1*window_size*window_size, C
        attn_windows = attn_windows.view(-1, D1, window_size[0], window_size[1], C)
        shifted_x = window_reverse(attn_windows, window_size, B, D1, Hp, Wp) # B, D1, Hp, Wp, C

        # reverse cyclic shift
        if any(i > 0 for i in shift_size):
            x = torch.roll(shifted_x, shifts=(shift_size[0], shift_size[1]), dims=(2, 3))
        else:
            x = shifted_x
        
        if pad_r > 0 or pad_b > 0:
            x = x[:, :, :H, :W, :].contiguous()

        x = shortcut + self.drop_path(x)

        shortcut = x
        x = self.norm2(x)
        attn_kv = self.norm_kv(attn_kv)
        x = F.pad(x, (0, 0, 0, pad_r, 0, pad_b, 0, 0))
        attn_kv = F.pad(attn_kv, (0, 0, 0, pad_r, 0, pad_b, 0, 0))

        # cyclic shift
        if any(i > 0 for i in shift_size):
            shifted_x = torch.roll(x, shifts=(-shift_size[0], -shift_size[1]), dims=(2, 3))
            shifted_attn_kv = torch.roll(attn_kv, shifts=(-shift_size[0], -shift_size[1]), dims=(2, 3))
            attn_mask_q = mask_matrix_q
            attn_mask_qkv = mask_matrix_qkv
        else:
            shifted_x = x
            shifted_attn_kv = attn_kv
            attn_mask_q = None
            attn_mask_qkv = None

        # partition windows
        x_windows = window_partition(shifted_x, window_size)  # nW*B, D1, window_size, window_size, C
        attn_kv_windows = window_partition(shifted_attn_kv, window_size)  # nW*B, D2, window_size, window_size, C
        x_windows = x_windows.view(-1, D1 * window_size[0] * window_size[1], C)  # nW*B, D1*window_size*window_size, C
        attn_kv_windows = attn_kv_windows.view(-1, D2 * window_size[0] * window_size[1], C)  # nW*B, D2*window_size*window_size, C

        # W-MSA/SW-MSA
        attn_windows = self.attn2(x_windows, attn_kv_windows, mask=attn_mask_qkv)[0]  # nW*B, D1*window_size*window_size, C

        # merge windows
        attn_windows = attn_windows.view(-1, D1, window_size[0], window_size[1], C)
        shifted_x = window_reverse(attn_windows, window_size, B, D1, Hp, Wp)  # B, D1, H, W, C

        # reverse cyclic shift
        if any(i > 0 for i in shift_size):
            x = torch.roll(shifted_x, shifts=(shift_size[0], shift_size[1]), dims=(2, 3))
        else:
            x = shifted_x

        if pad_r > 0 or pad_b > 0:
            x = x[:, :, :H, :W, :].contiguous()

        x = shortcut + self.drop_path(x)

        # FFN
        x = x + self.drop_path(self.mlp(self.norm3(x)))

        return x

class EncoderLayer(pl.LightningModule):
    def __init__(self, dim, depth, num_heads, num_frames, window_size=(8, 8), 
                 mlp_ratio=4., qkv_bias=True, qk_scale=None, drop=0., attn_drop=0., 
                 drop_path=0., norm_layer=nn.LayerNorm):
        """Encoder layer

        Args:
            dim (int): Number of feature channels
            depth (int): Depths of this stage.
            num_heads (int): Number of attention head.
            num_frames (int]): Number of input frames.
            window_size (tuple[int], optional): Window size. Defaults to (8, 8).
            mlp_ratio (int, optional): Ratio of mlp hidden dim to embedding dim. Defaults to 4.
            qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Defaults to True.
            qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set. Defaults to None.
            drop (float, optional): Dropout rate. Defaults to 0.
            attn_drop (float, optional): Attention dropout rate. Defaults to 0.
            drop_path (float, optional): Stochastic depth rate. Defaults to 0.
            norm_layer (pl.LightningModule, optional): Normalization layer. Defaults to nn.LayerNorm.
        """
        super().__init__()
        self.window_size = window_size
        self.shift_size = tuple(i // 2 for i in window_size)
        self.depth = depth

        # Build blocks
        self.blocks = nn.ModuleList([
            VSTSREncoderTransformerBlock(dim=dim, num_heads=num_heads,
            num_frames=num_frames,window_size=window_size, 
            shift_size=(0, 0) if (i % 2 == 0) else self.shift_size,
            mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
            drop=drop, attn_drop=attn_drop,
            drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path,
            norm_layer=norm_layer)
        for i in range(depth)])

    def forward(self, x):
        """Forward function.

        Args:
            x (torch.Tensor): (B, D, C, H, W)

        Returns:
            torch.Tensor: (B, D, C, H, W)
        """
        B, D, C, H, W = x.shape
        x = x.permute(0, 1, 3, 4, 2) # B, D, H, W, C

        window_size, shift_size = get_window_size((H, W), self.window_size, self.shift_size)

        Hp = int(np.ceil(H / window_size[0])) * window_size[0]
        Wp = int(np.ceil(W / window_size[1])) * window_size[1]

        img_mask = torch.zeros((1, D, Hp, Wp, 1), device=x.device) # 1, D, H, W, 1
        h_slices = (slice(0, -window_size[0]),
                    slice(-window_size[0], -shift_size[0]),
                    slice(-shift_size[0], None))
        w_slices = (slice(0, -window_size[1]),
                    slice(-window_size[1], -shift_size[1]),
                    slice(-shift_size[1], None))
        cnt = 0
        for h in h_slices:
            for w in w_slices:
                img_mask[:, :, h, w, :] = cnt
                cnt += 1

        mask_windows = window_partition(img_mask, window_size) # nW, D, Wh, Ww, 1
        mask_windows = mask_windows.view(-1, D * window_size[0] * window_size[1]) # nW, D*Wh*Ww
        attn_mask = mask_windows.unsqueeze(1) - mask_windows.unsqueeze(2) # nW, D*Wh*Ww, D*Wh*Ww
        attn_mask = attn_mask.masked_fill(attn_mask != 0, float(-100.0)).masked_fill(attn_mask == 0, float(0.0))

        for blk in self.blocks:
            x = blk(x, attn_mask)

        x = x.permute(0, 1, 4, 2, 3) # B, D, C, H, W

        return x

class DecoderLayer(pl.LightningModule):
    def __init__(self, dim, depth, num_heads, num_frames, window_size=(8, 8), 
                 mlp_ratio=4., qkv_bias=True, qk_scale=None, drop=0., attn_drop=0., 
                 drop_path=0., norm_layer=nn.LayerNorm):
        """Decoder layer

        Args:
            dim (int): Number of feature channels
            depth (int): Depths of this stage.
            num_heads (int): Number of attention head.
            num_frames (int]): Number of input frames.
            window_size (tuple[int], optional): Window size. Defaults to (8, 8).
            mlp_ratio (int, optional): Ratio of mlp hidden dim to embedding dim. Defaults to 4.
            qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Defaults to True.
            qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set. Defaults to None.
            drop (float, optional): Dropout rate. Defaults to 0.
            attn_drop (float, optional): Attention dropout rate. Defaults to 0.
            drop_path (float, optional): Stochastic depth rate. Defaults to 0.
            norm_layer (pl.LightningModule, optional): Normalization layer. Defaults to nn.LayerNorm.
        """
        super().__init__()
        self.window_size = window_size
        self.shift_size = tuple(i // 2 for i in window_size)
        self.depth = depth

        # Build blocks
        self.blocks = nn.ModuleList([
            VSTSRDecoderTransformerBlock(dim=dim, num_heads=num_heads,
            num_frames=num_frames,window_size=window_size, 
            shift_size=(0, 0) if (i % 2 == 0) else self.shift_size,
            mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
            drop=drop, attn_drop=attn_drop,
            drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path,
            norm_layer=norm_layer)
        for i in range(depth)])

    def forward(self, x, attn_kv):
        """Forward function.

        Args:
            x (torch.Tensor): (B, D1, C, H, W)
            attn_kv (torch.Tensor): (B, D2, C, H, W)

        Returns:
            torch.Tensor: (B, D1, C, H, W)
        """
        # print("x. shape",x. shape)
        # print("attn_kv. shape",attn_kv. shape)

        B, D1, C, H, W = x. shape
        _, D2, C, _, _ = attn_kv.shape
        x = x.permute(0, 1, 3, 4, 2) # B, D1, H, W, C
        attn_kv = attn_kv.permute(0, 1, 3, 4, 2) # B, D2, H, W, C

        window_size, shift_size = get_window_size((H, W), self.window_size, self.shift_size)

        Hp = int(np.ceil(H / window_size[0])) * window_size[0]
        Wp = int(np.ceil(W / window_size[1])) * window_size[1]

        img_mask_q = torch.zeros((1, D1, Hp, Wp, 1), device=x.device) # 1, D1, H, W, 1
        img_mask_kv = torch.zeros((1, D2, Hp, Wp, 1), device=x.device) # 1, D2, H, W, 1
        h_slices = (slice(0, -window_size[0]),
                    slice(-window_size[0], -shift_size[0]),
                    slice(-shift_size[0], None))
        w_slices = (slice(0, -window_size[1]),
                    slice(-window_size[1], -shift_size[1]),
                    slice(-shift_size[1], None))
        cnt = 0
        for h in h_slices:
            for w in w_slices:
                img_mask_q[:, :, h, w, :] = cnt
                img_mask_kv[:, :, h, w, :] = cnt
                cnt += 1

        mask_windows_q = window_partition(img_mask_q, window_size) # nW, D1, Wh, Ww, 1
        mask_windows_kv = window_partition(img_mask_kv, window_size) # nW, D2, Wh, Ww, 1
        mask_windows_q = mask_windows_q.view(-1, D1 * window_size[0] * window_size[1]) # nW, D1*Wh*Ww
        mask_windows_kv = mask_windows_kv.view(-1, D2 * window_size[0] * window_size[1]) # nW, D2*Wh*Ww
        attn_mask_q = mask_windows_q.unsqueeze(1) - mask_windows_q.unsqueeze(2) # nW, D1*Wh*Ww, D1*Wh*Ww
        attn_mask_qkv = mask_windows_kv.unsqueeze(1) - mask_windows_q.unsqueeze(2) # nW, D1*Wh*Ww, D2*Wh*Ww
        attn_mask_q = attn_mask_q.masked_fill(attn_mask_q != 0, float(-100.0)).masked_fill(attn_mask_q == 0, float(0.0))
        attn_mask_qkv = attn_mask_qkv.masked_fill(attn_mask_qkv != 0, float(-100.0)).masked_fill(attn_mask_qkv == 0, float(0.0))

        for blk in self.blocks:
            x = blk(x, attn_kv, attn_mask_q, attn_mask_qkv)

        x = x.permute(0, 1, 4, 2, 3) # B, D, C, H, W

        return x


class InputProj(pl.LightningModule):
    """Video input projection

    Args:
        in_channels (int): Number of input image channels. Default: 3.
        embed_dim (int): Number of output channels. Default: 32.
        kernel_size (int): Size of the convolution kernel. Default: 3
        stride (int): Stride of the convolution. Default: 1
        norm_layer (pl.LightningModule, optional): Normalization layer. Default: None.
        act_layer (pl.LightningModule): Activation layer. Default: nn.LeakyReLU.
    """
    def __init__(self, in_channels=3, embed_dim=32, kernel_size=3, stride=1, 
                 norm_layer=None, act_layer=nn.LeakyReLU):
        super().__init__()

        self.embed_dim = embed_dim

        self.proj = nn.Sequential(
            nn.Conv2d(in_channels, embed_dim, kernel_size=kernel_size, 
                      stride=stride, padding=kernel_size//2),
            act_layer(inplace=True)
        )

        if norm_layer is not None:
            self.norm = norm_layer(embed_dim)
        else:
            self.norm = None

    def forward(self, x):
        """

        Args:
            x (torch.Tensor): (B, D, C, H, W)

        Returns:
            torch.Tensor: (B, D, C, H, W)
        """
        B, D, C, H, W = x.shape
        x = x.view(-1, C, H, W) # B*D, C, H, W
        x = self.proj(x).view(B, D, -1, H, W) # B, D, C, H, W
        if self.norm is not None:
            x = x.permute(0, 1, 3, 4, 2) # B, D, H, W, C
            x = self.norm(x)
            x = x.permute(0, 1, 4, 2, 3) # B, D, C, H, W
        return x

class Downsample(pl.LightningModule):
    def __init__(self, in_chans, out_chans):
        super().__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(in_chans, out_chans, kernel_size=4, stride=2, padding=1),
        )

    def forward(self, x):
        """Forward function.

        Args:
            x (torch.Tensor): (B, D, C, H, W)

        Returns:
            torch.Tensor: (B, D, C, H, W)
        """
        B, D, C, H, W = x.shape
        x = x.view(-1, C, H, W) # B*D, C, H, W
        out = self.conv(x).view(B, D, -1, H // 2, W // 2)  # B, D, C, H, W
        return out

class Upsample(pl.LightningModule):
    def __init__(self, in_chans, out_chans):
        super().__init__()
        self.deconv = nn.Sequential(
            nn.ConvTranspose2d(in_chans, out_chans, kernel_size=2, stride=2),
        )

    def forward(self, x):
        """Forward function.

        Args:
            x (torch.Tensor): (B, D, C, H, W)

        Returns:
            torch.Tensor: (B, D, C, H, W)
        """
        B, D, C, H, W = x. shape
        x = x.view(-1, C, H, W) # B*D, C, H, W
        out = self.deconv(x).view(B, D, -1, H * 2, W * 2) # B, D, C, H, W
        return out

class RSTT(pl.LightningModule):
    def __init__(self, in_chans=4, embed_dim=96, 
                 depths=[8, 8, 8, 8, 8, 8], 
                 num_heads=[2, 4, 8, 8, 4, 2], num_frames=14,
                 window_sizes=[(4,4), (4,4), (4,4), (4,4), (4,4), (4,4)], 
                 mlp_ratio=2., qkv_bias=True, qk_scale=None,
                 drop_rate=0., attn_drop_rate=0., drop_path_rate=0.1,
                 norm_layer=nn.LayerNorm, patch_norm=True, 
                 back_RBs=0):
        """

        Args:
            in_chans (int, optional): Number of input image channels. Defaults to 3.
            embed_dim (int, optional): Number of projection output channels. Defaults to 32.
            depths (list[int], optional): Depths of each Transformer stage. Defaults to [2, 2, 2, 2, 2, 2, 2, 2].
            num_heads (list[int], optional): Number of attention head of each stage. Defaults to [2, 4, 8, 16, 16, 8, 4, 2].
            num_frames (int, optional): Number of input frames. Defaults to 4.
            window_size (tuple[int], optional): Window size. Defaults to (8, 8).
            mlp_ratio (int, optional): Ratio of mlp hidden dim to embedding dim. Defaults to 4..
            qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Defaults to True.
            qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set. Defaults to None.
            drop_rate (float, optional): Dropout rate. Defaults to 0.
            attn_drop_rate (float, optional): Attention dropout rate. Defaults to 0.
            drop_path_rate (float, optional): Stochastic depth rate. Defaults to 0.1.
            norm_layer (nn.Module, optional): Normalization layer. Defaults to nn.LayerNorm.
            patch_norm (bool, optional): If True, add normalization after patch embedding. Defaults to True.
            back_RBs (int, optional): Number of residual blocks for super resolution. Defaults to 10.
        """
        super().__init__()

        self.num_layers = len(depths)
        self.num_enc_layers = self.num_layers // 2
        self.num_dec_layers = self.num_layers // 2
        self.scale = 2 ** (self.num_enc_layers - 1)
        dec_depths = depths[self.num_enc_layers:]
        self.embed_dim = embed_dim
        self.patch_norm = patch_norm
        self.num_in_frames = num_frames
        self.num_out_frames = 1

        self.pos_drop = nn.Dropout(p=drop_rate)

        # Stochastic depth 
        # fzf？
        enc_dpr= [x.item() for x in torch.linspace(0, drop_path_rate, sum(depths[:self.num_enc_layers]))] 
        dec_dpr = enc_dpr[::-1]

        # fzf：feature extraction，input (B, D, C, H, W) ，returns (B, D, C, H, W)
        self.input_proj = InputProj(in_channels=in_chans, embed_dim=embed_dim,
                                    kernel_size=3, stride=1, act_layer=nn.LeakyReLU)
        
        # Encoder
        # fzf：ModuleList 只是一个存储模块的列表，不会定义前向传播的顺序。需要手动实现 forward 方法来控制数据流
        # Sequential 是一个layer，按照定义的子layer顺序自动执行前向传播。只需将模块按顺序添加即可
        # 不是如果用普通列表[]会发生啥
        self.encoder_layers = nn.ModuleList()
        self.downsample = nn.ModuleList()
        self.alignment = nn.ModuleList()
        for i_layer in range(self.num_enc_layers):
            encoder_layer = EncoderLayer(
                    dim=embed_dim, 
                    depth=depths[i_layer], num_heads=num_heads[i_layer], 
                    num_frames=num_frames, window_size=window_sizes[i_layer], mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, 
                    attn_drop=attn_drop_rate,
                    drop_path=enc_dpr[sum(depths[:i_layer]):sum(depths[:i_layer + 1])],
                    norm_layer=norm_layer
            )
            downsample = Downsample(embed_dim, embed_dim)
            allign = alignment(embed_dim)
            self.encoder_layers.append(encoder_layer)
            self.downsample.append(downsample)
            self.alignment.append(allign)

        # Decoder
        self.decoder_layers = nn.ModuleList()
        self.upsample = nn.ModuleList()
        for i_layer in range(self.num_dec_layers):
            decoder_layer = DecoderLayer(
                    dim=embed_dim, 
                    depth=depths[i_layer + self.num_enc_layers], 
                    num_heads=num_heads[i_layer + self.num_enc_layers], 
                    num_frames=num_frames, window_size=window_sizes[i_layer + self.num_enc_layers], mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, 
                    attn_drop=attn_drop_rate,
                    drop_path=dec_dpr[sum(dec_depths[:i_layer]):sum(dec_depths[:i_layer + 1])],
                    norm_layer=norm_layer
            )
            self.decoder_layers.append(decoder_layer)
            if i_layer != self.num_dec_layers - 1:
                upsample = Upsample(embed_dim, embed_dim)
                self.upsample.append(upsample)

        # Reconstruction block
        # fzf：固定原函数/类的部分参数，生成一个新的函数/类，如add x+y，固定y=10，生成新的函数add x+10
        ResidualBlock_noBN_f = functools.partial(ResidualBlock_noBN, nf=embed_dim)
        # fzf：back_RBs=0，optional
        self.recon_trunk = make_layer(ResidualBlock_noBN_f, back_RBs)
        # Upsampling
        self.upconv1 = nn.Conv2d(embed_dim, embed_dim * 4, 3, 1, 1, bias=True)
        self.upconv2 = nn.Conv2d(embed_dim, embed_dim * 4, 3, 1, 1, bias=True)
        self.upconv3 = nn.Conv2d(embed_dim, 64*4, 3, 1, 1, bias=True)

        self.pixel_shuffle = nn.PixelShuffle(2)
        self.HRconv = nn.Conv2d(64, 64, 3, 1, 1, bias=True)
        self.conv_last = nn.Conv2d(64, 3, 3, 1, 1, bias=True)

        # Activation function
        self.lrelu = nn.LeakyReLU(negative_slope=0.1, inplace=True)
        # 对模型中的每个子模块应用一个函数，这里应用_init_weights
        self.apply(self._init_weights)

    def _init_weights(self, m):
        # nn.Linear用截断正态分布 (trunc_normal_) 初始化权重。如果存在偏置，将其初始化为零。
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        # LayerNorm将偏置和权重分别初始化为常数（偏置为0，权重为1
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, x):
        B, D, C, H, W = x.size()  # D input video frames
        x = x.permute(0, 2, 1, 3, 4)
        # upsample_x = F.interpolate(x, (2*D-1, H*4, W*4), mode='trilinear', align_corners=False)

        x = x.permute(0, 2, 1, 3, 4)

        x = self.input_proj(x) # B, D, C, H, W

        # 调整输入张量x的高度和宽度，使其能够被 scale 整除
        # 通过 np.ceil(H / self.scale) 计算出向上取整的倍数。
        # 将结果乘以 scale，得到最近的、能被 scale 整除的高度 Hp
        Hp = int(np.ceil(H / self.scale)) * self.scale
        Wp = int(np.ceil(W / self.scale)) * self.scale
        # 往右下角填充0到指定尺寸，see examples,两个0代表左上角填充
        x = F.pad(x, (0, Wp - W, 0, Hp - H))

        encoder_features = []
        for i_layer in range(self.num_enc_layers):
            x = self.encoder_layers[i_layer](x)
            x = self.alignment[i_layer](x) 
            encoder_features.append(x)
            # downsample也就是一个卷积+reshape，尺寸缩小一半
            if i_layer != self.num_enc_layers - 1:
                x = self.downsample[i_layer](x)

        _, _, C, h, w = x.size()
        # TODO: Use interpolation for queries
        # 偶数索引 i：直接复制 x 中的帧，奇数索引 i：插值，取 x 中相邻两帧的平均值
        y = x[:,:1,:,:,:]
        # y = torch.zeros((B, self.num_out_frames, C, h, w), device=x.device)
        # for i in range(self.num_out_frames):
        #     if i % 2 == 0:
        #         y[:, i, :, :, :] = x[:, i//2]
        #     else:
        #         y[:, i, :, :, :] = (x[:, i//2] + x[:, i//2 + 1]) / 2

        for i_layer in range(self.num_dec_layers):
            y = self.decoder_layers[i_layer](y, encoder_features[-i_layer - 1])
            if i_layer != self.num_dec_layers - 1:
                y = self.upsample[i_layer](y)

        y = y[:, :, :, :H, :W].contiguous()
        # Super-resolution
        B, D, C, H, W = y.size()
        y = y.view(B*D, C, H, W)
        out = self.recon_trunk(y)
        # B  embed_dim H W  扩充通道 pixshuffle B  embed_dim 2H 2W 
        out = self.lrelu(self.pixel_shuffle(self.upconv1(out)))
        # B  embed_dim 2H 2W  扩充通道 pixshuffle B  embed_dim 4H 4W 
        out = self.lrelu(self.pixel_shuffle(self.upconv2(out)))
        out = self.lrelu(self.pixel_shuffle(self.upconv3(out)))

        # B  embed_dim 4H 4W

        out = self.lrelu(self.HRconv(out))
        # B  embed_dim 4H 4W  卷积     ->  B 3 4H 4W
        # 上面的 B 不是batch_size
        out = self.conv_last(out)
        _, _, H, W = out.size()
        outs = out.view(B, -1 , H, W)
        # outs = outs + upsample_x.permute(0, 2, 1, 3, 4)


        return outs

if __name__ == '__main__':
    import torch
    x = torch.randn(1,14,4,48,48)
    model = RSTT()
    output = model(x)
    print(output.size())
