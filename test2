import math
import torch
import torch.nn as nn
import torch.utils.checkpoint as checkpoint
import numbers
from basicsr.utils.registry import ARCH_REGISTRY
from basicsr.archs.arch_util import to_2tuple, trunc_normal_
import torch.nn.functional as F

from einops import rearrange

def to_3d(x):
    return rearrange(x, 'b c h w -> b (h w) c')

def to_4d(x,h,w):
    return rearrange(x, 'b (h w) c -> b c h w',h=h,w=w)

class BiasFree_LayerNorm(nn.Module):
    def __init__(self, normalized_shape):
        super(BiasFree_LayerNorm, self).__init__()
        if isinstance(normalized_shape, numbers.Integral):
            normalized_shape = (normalized_shape,)
        normalized_shape = torch.Size(normalized_shape)

        assert len(normalized_shape) == 1

        self.weight = nn.Parameter(torch.ones(normalized_shape))
        self.normalized_shape = normalized_shape

    def forward(self, x):
        sigma = x.var(-1, keepdim=True, unbiased=False)
        return x / torch.sqrt(sigma+1e-5) * self.weight

class WithBias_LayerNorm(nn.Module):
    def __init__(self, normalized_shape):
        super(WithBias_LayerNorm, self).__init__()
        if isinstance(normalized_shape, numbers.Integral):
            normalized_shape = (normalized_shape,)
        normalized_shape = torch.Size(normalized_shape)

        assert len(normalized_shape) == 1

        self.weight = nn.Parameter(torch.ones(normalized_shape))
        self.bias = nn.Parameter(torch.zeros(normalized_shape))
        self.normalized_shape = normalized_shape

    def forward(self, x):
        mu = x.mean(-1, keepdim=True)
        sigma = x.var(-1, keepdim=True, unbiased=False)
        return (x - mu) / torch.sqrt(sigma+1e-5) * self.weight + self.bias
        
class LayerNorm(nn.Module):
    def __init__(self, dim, LayerNorm_type):
        super(LayerNorm, self).__init__()
        if LayerNorm_type =='BiasFree':
            self.body = BiasFree_LayerNorm(dim)
        else:
            self.body = WithBias_LayerNorm(dim)

    def forward(self, x):
        h, w = x.shape[-2:]
        return to_4d(self.body(to_3d(x)), h, w)


def convert_dilated_to_nondilated(kernel, dilate_rate):
    identity_kernel = torch.ones((1, 1, 1, 1)).to(kernel.device)
    if kernel.size(1) == 1:
        #   This is a DW kernel
        dilated = F.conv_transpose2d(kernel, identity_kernel, stride=dilate_rate)
        return dilated
    else:
        #   This is a dense or group-wise (but not DW) kernel
        slices = []
        for i in range(kernel.size(1)):
            dilated = F.conv_transpose2d(kernel[:,i:i+1,:,:], identity_kernel, stride=dilate_rate)
            slices.append(dilated)
        return torch.cat(slices, dim=1)
    
def merge_dilated_into_large_kernel(large_kernel, dilated_kernel, dilated_r):
    large_k = large_kernel.size(2)
    dilated_k = dilated_kernel.size(2)
    equivalent_kernel_size = dilated_r * (dilated_k - 1) + 1
    equivalent_kernel = convert_dilated_to_nondilated(dilated_kernel, dilated_r)
    rows_to_pad = large_k // 2 - equivalent_kernel_size // 2
    merged_kernel = large_kernel + F.pad(equivalent_kernel, [rows_to_pad] * 4)
    return merged_kernel

class DilatedReparamBlock(nn.Module):
    """
    Dilated Reparam Block proposed in UniRepLKNet (https://github.com/AILab-CVC/UniRepLKNet)
    We assume the inputs to this block are (N, C, H, W)
    train时多卷积核并行

    train结束后保存未重参的模型
    另写一个rep.py来实现重参

    """
    def __init__(self, channels, kernel_size, deploy=False):
        super().__init__()

        self.lk_origin = nn.Conv2d(channels, channels, kernel_size, stride=1,
                                    padding=kernel_size//2, dilation=1, groups=channels)
        self.deploy = deploy
        #   Default settings. We did not tune them carefully. Different settings may work better.
        if kernel_size == 17:
            self.kernel_sizes = [5, 9, 3, 3, 3]
            self.dilates = [1, 2, 4, 5, 7]
        elif kernel_size == 15:
            self.kernel_sizes = [5, 7, 3, 3, 3]
            self.dilates = [1, 2, 3, 5, 7]
        elif kernel_size == 13:
            self.kernel_sizes = [5, 7, 3, 3, 3]
            self.dilates = [1, 2, 3, 4, 5]
        elif kernel_size == 11:
            self.kernel_sizes = [5, 5, 3, 3, 3]
            self.dilates = [1, 2, 3, 4, 5]
        elif kernel_size == 9:
            self.kernel_sizes = [5, 5, 3, 3]
            self.dilates = [1, 2, 3, 4]
        elif kernel_size == 7:
            self.kernel_sizes = [5, 3, 3]
            self.dilates = [1, 2, 3]
        elif kernel_size == 5:
            self.kernel_sizes = [3, 3]
            self.dilates = [1, 2]
        else:
            raise ValueError('Dilated Reparam Block requires kernel_size >= 5')

        # you will see deploy_results == inference_results == trained_results
        # 为啥bias = false
        if not self.deploy:
            for k, r in zip(self.kernel_sizes, self.dilates):
                self.__setattr__('dil_conv_k{}_{}'.format(k, r),
                                 nn.Conv2d(in_channels=channels, out_channels=channels, kernel_size=k, stride=1,
                                           padding=(r * (k - 1) + 1) // 2, dilation=r, groups=channels,
                                           bias=False))
                                           

    def forward(self, x):
        
        # if self.deploy:      # deploy mode
        #     return self.lk_origin(x)
        # else:
        #     out = self.lk_origin(x)
        #     for k, r in zip(self.kernel_sizes, self.dilates):
        #         conv = self.__getattr__('dil_conv_k{}_{}'.format(k, r))
        #         out = out +(conv(x))
        #     return out
        # if self.training?
        out = self.lk_origin(x)
        for k, r in zip(self.kernel_sizes, self.dilates):
            conv_name = 'dil_conv_k{}_{}'.format(k, r)
            if hasattr(self, conv_name):  # 检查属性是否存在
                conv = self.__getattr__(conv_name)
                out = out + conv(x)
        return out


    def merge_dilated_branches(self):
        '''
        model = build_segmentor(cfg.model, test_cfg=cfg.get('test_cfg'))
        checkpoint = load_checkpoint(model, args.checkpoint, map_location='cpu')
        if hasattr(model, 'module'):
            load_state_dict(model.module, checkpoint['state_dict'], strict=False)
            model = model.module
        else:
            load_state_dict(model, checkpoint['state_dict'], strict=False)
        
        for m in model.modules():
            if hasattr(m, 'reparameterize_unireplknet'):
                m.reparameterize_unireplknet()

        result = {
            'state_dict': model.state_dict()
        }
        torch.save(result, args.target)
        '''
    
        origin_k = self.lk_origin.weight
        origin_b = self.lk_origin.bias
        for k, r in zip(self.kernel_sizes, self.dilates):
            conv = self.__getattr__('dil_conv_k{}_{}'.format(k, r))
            branch_k = conv.weight
            # branch_b = conv.bias # 并行分支没有bias
            origin_k = merge_dilated_into_large_kernel(origin_k, branch_k, r)
            # origin_b += branch_b
        merged_conv = nn.Conv2d(origin_k.size(0), origin_k.size(0), origin_k.size(2), stride=1,
                        padding=origin_k.size(2)//2, dilation=1, groups=origin_k.size(0), bias=True)
        merged_conv.weight.data = origin_k
        merged_conv.bias.data = origin_b
        self.lk_origin = merged_conv
        for k, r in zip(self.kernel_sizes, self.dilates):
            self.__delattr__('dil_conv_k{}_{}'.format(k, r))

class HighMixer(nn.Module):
    def __init__(self, dim, kernel_size=3, stride=1, padding=1,
        **kwargs, ):
        super().__init__()
        
        self.conv = nn.Conv2d(dim, dim, kernel_size=1, stride=1, padding=0, bias=False)
        self.proj = nn.Conv2d(dim, dim, kernel_size=kernel_size, stride=stride, padding=padding, bias=False, groups=dim)
        self.act = nn.GELU()

    def forward(self, x):
        # B, C H, W
        hx = self.conv(x)
        hx = self.proj(hx)
        hx = self.act(hx)
        return hx



class LowMixer(nn.Module):
    def __init__(self, dim):
        super(LowMixer,self).__init__()
        hidden = int(2*dim)
        self.conv1_0 = nn.Conv2d(dim, dim, kernel_size=1)

        self.conv1_1 = nn.Conv2d(dim, hidden, kernel_size=1)
        self.act = nn.SiLU()

        self.conv_spatial = nn.Conv2d(hidden, hidden, 7, stride=1, padding=3, groups=hidden)

        self.conv1_4 = nn.Conv2d(hidden, hidden, kernel_size=1)
        self.Conv11 = DilatedReparamBlock(hidden,kernel_size=15)  

        self.conv1_5 = nn.Conv2d(hidden, hidden, kernel_size=1)
        self.Conv21 = DilatedReparamBlock(hidden,kernel_size=15)
        self.Conv31 = DilatedReparamBlock(hidden,kernel_size=15)

        self.conv1_6 = nn.Conv2d(hidden, hidden, kernel_size=1)
        self.conv1_7 = nn.Conv2d(hidden, dim, kernel_size=1)
        self.proj_1 = nn.Conv2d(dim, dim, kernel_size=1)

    def forward(self, x):
        u = self.conv1_0(x)

        attn = self.conv1_1(x)
        attn = self.act(attn)
        attn = self.conv_spatial(attn)


        u3 = attn.clone()
        attn = self.conv1_4(attn)
        attn = self.Conv11(attn)
        attn = self.act(attn + u3)

        u4 = attn.clone()
        attn = self.conv1_5(attn)
        attn = self.Conv21(attn)
        attn = self.act(attn + u4)

        u5 = attn.clone()
        attn = self.conv1_6(attn)
        attn = self.Conv31(attn)
        attn = self.act(attn + u5)


        attn = self.conv1_7(attn)

        out1 = u * attn
        out1 = self.proj_1(out1)
        return out1

    

class LKA_back_new_attn(nn.Module):
    def __init__(self, dim, high_ratio):
        super(LKA_back_new_attn,self).__init__()
        
        self.high_dim = int(dim * high_ratio)
        self.low_dim = dim - self.high_dim
        self.low_mixer = LowMixer(self.low_dim)
        self.high_mixer = HighMixer(self.high_dim)

        self.conv_fuse = nn.Conv2d(dim, dim, kernel_size=3, stride=1, padding=1, bias=False, groups=dim)
        self.proj = nn.Conv2d(dim, dim, kernel_size=1, stride=1, padding=0)
    
    def forward(self, x):\
    
        hx = x[:,:self.high_dim,:,:].contiguous()
        hx = self.high_mixer(hx)
        lx = x[:,self.high_dim:,:,:].contiguous()
        lx = self.low_mixer(lx)
 
        x = torch.cat((hx, lx), dim=1)
        x = x + self.conv_fuse(x)
        out = self.proj(x)

        return out
    

def drop_path(x, drop_prob: float = 0., training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).

    From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/drop.py
    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0], ) + (1, ) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).

    From: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/drop.py
    """

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class ChannelAttention(nn.Module):
    """Channel attention used in RCAN.
    Args:
        num_feat (int): Channel number of intermediate features.
        squeeze_factor (int): Channel squeeze factor. Default: 16.
    """

    def __init__(self, num_feat, squeeze_factor=16):
        super(ChannelAttention, self).__init__()
        self.attention = nn.Sequential(
            nn.AdaptiveAvgPool2d(1),
            nn.Conv2d(num_feat, num_feat // squeeze_factor, 1, padding=0),
            nn.ReLU(inplace=True),
            nn.Conv2d(num_feat // squeeze_factor, num_feat, 1, padding=0),
            nn.Sigmoid())

    def forward(self, x):
        y = self.attention(x)
        return x * y


class CAB(nn.Module):

    def __init__(self, num_feat, compress_ratio=3, squeeze_factor=30):
        super(CAB, self).__init__()

        self.cab = nn.Sequential(
            nn.Conv2d(num_feat, num_feat // compress_ratio, 3, 1, 1),
            nn.GELU(),
            nn.Conv2d(num_feat // compress_ratio, num_feat, 3, 1, 1),
            ChannelAttention(num_feat, squeeze_factor)
            )

    def forward(self, x):
        return self.cab(x)


class Mlp(nn.Module):

    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = x.permute(0,2,3,1)
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        x = x.permute(0,3,1,2)
        return x






class HAB(nn.Module):
    r""" Hybrid Attention Block.

    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        num_heads (int): Number of attention heads.
        window_size (int): Window size.
        shift_size (int): Shift size for SW-MSA.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float, optional): Stochastic depth rate. Default: 0.0
        act_layer (nn.Module, optional): Activation layer. Default: nn.GELU
        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm
    """

    # fzf
    def __init__(self,
                 dim,
                 compress_ratio=3,
                 squeeze_factor=30,
                 conv_scale=0.01,
                 mlp_ratio=4.,
                 drop=0.,
                 drop_path=0.,
                 act_layer=nn.GELU,
                 high_ratio= 0.5,
                 LayerNorm_type='WithBias'):
        super().__init__()
        self.dim = dim
        self.mlp_ratio = mlp_ratio

        self.norm1 = LayerNorm(dim, LayerNorm_type)

        # 瓶颈,高低频斜坡结构
        self.attn = LKA_back_new_attn(dim, high_ratio= high_ratio)

        self.conv_scale = conv_scale
        self.conv_block = CAB(num_feat=dim, compress_ratio=compress_ratio, squeeze_factor=squeeze_factor)

        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = LayerNorm(dim, LayerNorm_type)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x):


        shortcut = x
        x = self.norm1(x)

        # Conv_X
        conv_x = self.conv_block(x)

        attn_x = self.attn(x)

        # FFN
        x = shortcut + self.drop_path(attn_x) + conv_x * self.conv_scale
        x = x + self.drop_path(self.mlp(self.norm2(x)))

        return x




class AttenBlocks(nn.Module):
    """ A series of attention blocks for one RHAG.

    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
        downsample (nn.Module | None, optional): Downsample layer at the end of the layer. Default: None
        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False.
    """

    def __init__(self,
                 dim,
                 depth,
                 compress_ratio,
                 squeeze_factor,
                 conv_scale,
                 mlp_ratio=4.,
                 drop=0.,
                 drop_path=0.,
                 high_ratio = 0.5,
                 LayerNorm_type='WithBias',
                 use_checkpoint=False):

        super().__init__()
        self.dim = dim

        self.depth = depth
        self.use_checkpoint = use_checkpoint

        # build blocks
        self.blocks = nn.ModuleList([
            HAB(
                dim=dim,
                compress_ratio=compress_ratio,
                squeeze_factor=squeeze_factor,
                conv_scale=conv_scale,
                mlp_ratio=mlp_ratio,
                drop=drop,
                drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path,
                act_layer=nn.GELU,
                high_ratio= high_ratio,
                LayerNorm_type=LayerNorm_type) for i in range(depth)
        ])
                


    def forward(self, x):
        for blk in self.blocks:
            x = blk(x)
        # x = self.overlap_attn(x, x_size, params['rpi_oca'])

        return x


class RHAG(nn.Module):
    """Residual Hybrid Attention Group (RHAG).

    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
        downsample (nn.Module | None, optional): Downsample layer at the end of the layer. Default: None
        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False.
        img_size: Input image size.
        patch_size: Patch size.
        resi_connection: The convolutional block before residual connection.
    """

    def __init__(self,
                 dim,
                 depth,
                 compress_ratio,
                 squeeze_factor,
                 conv_scale,
                 mlp_ratio=4.,
                 drop=0.,
                 drop_path=0.,
                 LayerNorm_type='WithBias',
                 high_ratio = 0.5,
                 use_checkpoint=False,
                 resi_connection='1conv'):
        super(RHAG, self).__init__()
        self.dim = dim

        self.residual_group = AttenBlocks(
            dim=dim,
            depth=depth,
            compress_ratio=compress_ratio,
            squeeze_factor=squeeze_factor,
            conv_scale=conv_scale,
            mlp_ratio=mlp_ratio,
            drop=drop,
            drop_path=drop_path,
            high_ratio = high_ratio,
            LayerNorm_type='WithBias',
            use_checkpoint=use_checkpoint)

        if resi_connection == '1conv':
            self.conv = nn.Conv2d(dim, dim, 3, 1, 1)
        elif resi_connection == 'identity':
            self.conv = nn.Identity()


    def forward(self, x):
        return self.conv(self.residual_group(x)) + x




class Upsample(nn.Sequential):
    """Upsample module.

    Args:
        scale (int): Scale factor. Supported scales: 2^n and 3.
        num_feat (int): Channel number of intermediate features.
    """

    def __init__(self, scale, num_feat):
        m = []
        if (scale & (scale - 1)) == 0:  # scale = 2^n
            for _ in range(int(math.log(scale, 2))):
                m.append(nn.Conv2d(num_feat, 4 * num_feat, 3, 1, 1))
                m.append(nn.PixelShuffle(2))
        elif scale == 3:
            m.append(nn.Conv2d(num_feat, 9 * num_feat, 3, 1, 1))
            m.append(nn.PixelShuffle(3))
        else:
            raise ValueError(f'scale {scale} is not supported. ' 'Supported scales: 2^n and 3.')
        super(Upsample, self).__init__(*m)


@ARCH_REGISTRY.register()
class LKFormer_HAT(nn.Module):
    r""" Hybrid Attention Transformer
        A PyTorch implementation of : `Activating More Pixels in Image Super-Resolution Transformer`.
        Some codes are based on SwinIR.
    Args:
        img_size (int | tuple(int)): Input image size. Default 64
        patch_size (int | tuple(int)): Patch size. Default: 1
        in_chans (int): Number of input image channels. Default: 3
        embed_dim (int): Patch embedding dimension. Default: 96
        depths (tuple(int)): Depth of each Swin Transformer layer.
        num_heads (tuple(int)): Number of attention heads in different layers.
        window_size (int): Window size. Default: 7
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim. Default: 4
        qkv_bias (bool): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float): Override default qk scale of head_dim ** -0.5 if set. Default: None
        drop_rate (float): Dropout rate. Default: 0
        attn_drop_rate (float): Attention dropout rate. Default: 0
        drop_path_rate (float): Stochastic depth rate. Default: 0.1
        norm_layer (nn.Module): Normalization layer. Default: nn.LayerNorm.
        ape (bool): If True, add absolute position embedding to the patch embedding. Default: False
        patch_norm (bool): If True, add normalization after patch embedding. Default: True
        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False
        upscale: Upscale factor. 2/3/4/8 for image SR, 1 for denoising and compress artifact reduction
        img_range: Image range. 1. or 255.
        upsampler: The reconstruction reconstruction module. 'pixelshuffle'/'pixelshuffledirect'/'nearest+conv'/None
        resi_connection: The convolutional block before residual connection. '1conv'/'3conv'
    """
    def __init__(self,
                 in_chans=3,
                 embed_dim=96,
                 depths=(6, 6, 6, 6),
                 compress_ratio=3,
                 squeeze_factor=30,
                 conv_scale=0.01,
                 mlp_ratio=4.,
                 drop_rate=0.,
                 drop_path_rate=0.1,
                 high_ratios = (0.5, 0.5, 0.5, 0.5),
                 LayerNorm_type='WithBias',
                 patch_norm=True,
                 use_checkpoint=False,
                 upscale=2,
                 img_range=1.,
                 upsampler='',
                 resi_connection='1conv',
                 **kwargs):
 
        super(LKFormer_HAT, self).__init__()

        num_in_ch = in_chans
        num_out_ch = in_chans
        num_feat = 64
        self.img_range = img_range
        if in_chans == 3:
            rgb_mean = (0.4488, 0.4371, 0.4040)
            self.mean = torch.Tensor(rgb_mean).view(1, 3, 1, 1)
        else:
            self.mean = torch.zeros(1, 1, 1, 1)
        self.upscale = upscale
        self.upsampler = upsampler

        # ------------------------- 1, shallow feature extraction ------------------------- #
        self.conv_first = nn.Conv2d(num_in_ch, embed_dim, 3, 1, 1)

        # ------------------------- 2, deep feature extraction ------------------------- #
        self.num_layers = len(depths)
        self.embed_dim = embed_dim
        self.num_features = embed_dim
        self.mlp_ratio = mlp_ratio

        # stochastic depth
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))]  # stochastic depth decay rule

        # build Residual Hybrid Attention Groups (RHAG)
        self.layers = nn.ModuleList()
        for i_layer in range(self.num_layers):
            layer = RHAG(
                dim=embed_dim,
                depth=depths[i_layer],
                compress_ratio=compress_ratio,
                squeeze_factor=squeeze_factor,
                conv_scale=conv_scale,
                mlp_ratio=self.mlp_ratio,
                drop=drop_rate,
                drop_path=dpr[sum(depths[:i_layer]):sum(depths[:i_layer + 1])],  # no impact on SR results
                # norm_layer=norm_layer,
                LayerNorm_type='WithBias',
                high_ratio = high_ratios[i_layer],
                use_checkpoint=use_checkpoint,
                resi_connection=resi_connection)
            self.layers.append(layer)

        # self.norm = norm_layer(self.num_features)
        self.norm = LayerNorm(embed_dim, LayerNorm_type)

        # build the last conv layer in deep feature extraction
        if resi_connection == '1conv':
            self.conv_after_body = nn.Conv2d(embed_dim, embed_dim, 3, 1, 1)
        elif resi_connection == 'identity':
            self.conv_after_body = nn.Identity()

        # ------------------------- 3, high quality image reconstruction ------------------------- #
        if self.upsampler == 'pixelshuffle':
            # for classical SR
            self.conv_before_upsample = nn.Sequential(
                nn.Conv2d(embed_dim, num_feat, 3, 1, 1), nn.LeakyReLU(inplace=True))
            self.upsample = Upsample(upscale, num_feat)
            self.conv_last = nn.Conv2d(num_feat, num_out_ch, 3, 1, 1)

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward_features(self, x):

        for layer in self.layers:
            x = layer(x)

        x = self.norm(x)  #?

        return x

    def forward(self, x):
        self.mean = self.mean.type_as(x)
        x = (x - self.mean) * self.img_range

        if self.upsampler == 'pixelshuffle':
            # for classical SR
            x = self.conv_first(x)
            x = self.conv_after_body(self.forward_features(x)) + x
            x = self.conv_before_upsample(x)
            x = self.conv_last(self.upsample(x))

        x = x / self.img_range + self.mean

        return x
    

if __name__ == '__main__':


    model = LKFormer_HAT(
                 in_chans=3,
                 embed_dim=96,
                 depths=(6, 6, 6, 6),
                 compress_ratio=3,
                 squeeze_factor=30,
                 conv_scale=0.01,
                 mlp_ratio=4.,
                 drop_rate=0.,
                 drop_path_rate=0.1,
                 high_ratios = (0.5, 0.5, 0.5, 0.5),
                 LayerNorm_type='WithBias',
                 patch_norm=True,
                 use_checkpoint=False,
                 upscale=2,
                 img_range=1.,
                 upsampler='pixelshuffle',
                 resi_connection='1conv',
                )
    device = torch.device('cuda')
    model.eval()
    model = model.cuda()
    from fvcore.nn import FlopCountAnalysis, parameter_count
    
    tensor = torch.rand(1, 3, 64, 64).cuda()
    
    flops = FlopCountAnalysis(model, tensor)
    print("FLOPs:(G) ", flops.total()/(10**9))
    total_params = sum(p.numel() for p in model.parameters())
    print("Total Parameters:(M)", total_params/(10**6))
